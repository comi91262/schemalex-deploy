// Code generated by internal/cmd/gencoltypes/main.go; DO NOT EDIT.

package model

// ColumnType describes the possible types that a column may take
type ColumnType int

// List of possible ColumnType values
const (
	ColumnTypeInvalid ColumnType = iota
	ColumnTypeBigInt
	ColumnTypeBinary
	ColumnTypeBit
	ColumnTypeBlob
	ColumnTypeBool
	ColumnTypeBoolean
	ColumnTypeChar
	ColumnTypeDate
	ColumnTypeDateTime
	ColumnTypeDecimal
	ColumnTypeDouble
	ColumnTypeEnum
	ColumnTypeFloat
	ColumnTypeGeometry
	ColumnTypeGeometryCollection
	ColumnTypeInt
	ColumnTypeInteger
	ColumnTypeJSON
	ColumnTypeLineString
	ColumnTypeLongBlob
	ColumnTypeLongText
	ColumnTypeMediumBlob
	ColumnTypeMediumInt
	ColumnTypeMediumText
	ColumnTypeMultiLineString
	ColumnTypeMultiPoint
	ColumnTypeMultiPolygon
	ColumnTypeNumeric
	ColumnTypePoint
	ColumnTypePolygon
	ColumnTypeReal
	ColumnTypeSet
	ColumnTypeSmallInt
	ColumnTypeText
	ColumnTypeTime
	ColumnTypeTimestamp
	ColumnTypeTinyBlob
	ColumnTypeTinyInt
	ColumnTypeTinyText
	ColumnTypeVarBinary
	ColumnTypeVarChar
	ColumnTypeYear

	ColumnTypeMax
)

func (c ColumnType) String() string {
	switch c {
	case ColumnTypeBigInt:
		return "BIGINT"
	case ColumnTypeBinary:
		return "BINARY"
	case ColumnTypeBit:
		return "BIT"
	case ColumnTypeBlob:
		return "BLOB"
	case ColumnTypeBool:
		return "BOOL"
	case ColumnTypeBoolean:
		return "BOOLEAN"
	case ColumnTypeChar:
		return "CHAR"
	case ColumnTypeDate:
		return "DATE"
	case ColumnTypeDateTime:
		return "DATETIME"
	case ColumnTypeDecimal:
		return "DECIMAL"
	case ColumnTypeDouble:
		return "DOUBLE"
	case ColumnTypeEnum:
		return "ENUM"
	case ColumnTypeFloat:
		return "FLOAT"
	case ColumnTypeGeometry:
		return "GEOMETRY"
	case ColumnTypeGeometryCollection:
		return "GEOMETRYCOLLECTION"
	case ColumnTypeInt:
		return "INT"
	case ColumnTypeInteger:
		return "INTEGER"
	case ColumnTypeJSON:
		return "JSON"
	case ColumnTypeLineString:
		return "LINESTRING"
	case ColumnTypeLongBlob:
		return "LONGBLOB"
	case ColumnTypeLongText:
		return "LONGTEXT"
	case ColumnTypeMediumBlob:
		return "MEDIUMBLOB"
	case ColumnTypeMediumInt:
		return "MEDIUMINT"
	case ColumnTypeMediumText:
		return "MEDIUMTEXT"
	case ColumnTypeMultiLineString:
		return "MULTILINESTRING"
	case ColumnTypeMultiPoint:
		return "MULTIPOINT"
	case ColumnTypeMultiPolygon:
		return "MULTIPOLYGON"
	case ColumnTypeNumeric:
		return "NUMERIC"
	case ColumnTypePoint:
		return "POINT"
	case ColumnTypePolygon:
		return "POLYGON"
	case ColumnTypeReal:
		return "REAL"
	case ColumnTypeSet:
		return "SET"
	case ColumnTypeSmallInt:
		return "SMALLINT"
	case ColumnTypeText:
		return "TEXT"
	case ColumnTypeTime:
		return "TIME"
	case ColumnTypeTimestamp:
		return "TIMESTAMP"
	case ColumnTypeTinyBlob:
		return "TINYBLOB"
	case ColumnTypeTinyInt:
		return "TINYINT"
	case ColumnTypeTinyText:
		return "TINYTEXT"
	case ColumnTypeVarBinary:
		return "VARBINARY"
	case ColumnTypeVarChar:
		return "VARCHAR"
	case ColumnTypeYear:
		return "YEAR"
	default:
		return "(invalid)"
	}
}

// SynonymType returns synonym for a given type.
// If the type does not have a synonym then this method returns the receiver itself
func (c ColumnType) SynonymType() ColumnType {
	switch c {
	case ColumnTypeBool:
		return ColumnTypeTinyInt
	case ColumnTypeBoolean:
		return ColumnTypeTinyInt
	case ColumnTypeInteger:
		return ColumnTypeInt
	case ColumnTypeNumeric:
		return ColumnTypeDecimal
	case ColumnTypeReal:
		return ColumnTypeDouble
	}
	return c
}
